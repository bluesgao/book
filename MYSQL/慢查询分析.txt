一，定位慢查询sql
1，是否开启慢查询日志
show variables like 'slow_query_log';

开启慢查询日志
set global slow_query_log='NO';

2，慢查询日志文件存储位置
show variables like 'slow_query_log_file';

3，慢查询时间阈值(秒)
show variables like 'long_query_time';

设置慢查询时间阈值
set global long_query_time=1;

二，使用explain查看执行计划（https://dev.mysql.com/doc/refman/5.7/en/explain-output.html）
expain出来的信息有10列
分别是id、select_type、table、type、possible_keys、key、key_len、ref、rows、Extra
解释：
id:选择标识符，sql执行顺序是根据id从大到小执行。
select_type:表示查询的类型。
table:输出结果集的表
partitions:匹配的分区
type:表示表的连接类型
        all-全数据表扫描
        index-全索引表扫描
        range-对索引列进行范围查找
        index_merge-合并索引，使用多个单列索引查找
        ref-表示使用了非唯一索引或者唯一索引的非唯一性前缀
        eq_ref-查找时使用primaryKey或者uniqueKey，通常使用在多表联合查询中
        const-表示使用了primaryKey或者uniqueKey与常量值进行比较
        system-一般用于myisam和memory表，属于const类型的特例
possible_keys:表示查询时，可能使用的索引
key:表示实际使用的索引
key_len:索引字段的长度
ref:列与索引的比较
rows:扫描出的行数(估算的行数)
filtered:按表条件过滤的行百分比
Extra:执行情况的描述和说明
        Using index-说明采用了覆盖索引避免回表操作
        Using union-说明采用了index_merge

一般至少使用range级别的连接类型，如果只使用了all或者index级别的连接方式，可以从sql语句和索引设计的角度进行优化。

三，查询sql具体的执行成本
1，show variables like 'profiling';
2，set session profiling='ON';
3，show profiles;
4，show profile for query query_id;
或者使用 SELECT * FROM information_schema.profiling;
在高版本的mysql中已经废弃，对于性能的监控逐渐使用PERFORMANCE_SCHEM代替INFORMATION_SCHEMA（https://dev.mysql.com/doc/refman/5.7/en/performance-schema.html）
